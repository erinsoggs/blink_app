<% helpers = ActionController::Base.helpers %>
const endAudio = new Audio("<%= helpers.image_url('sounds/end_dong.mp3') %>");

const playButtons = document.querySelectorAll(".page__play-btn");

const updateHTMLForCompletedRoutine = (timeOfDay) => {
  const completedElement = document.getElementById(`completed-${timeOfDay}`);
  const img_path = "<%= helpers.image_url('vectors/completed.svg') %>";
  completedElement.innerHTML = `<img src='${img_path}' >`;
}

const setPlayButton = (button, audio) => {
  button.addEventListener('click', (event) => {
    if (event.currentTarget.classList.contains('playing')){
      event.currentTarget.classList.remove('playing');
      event.currentTarget.classList.add('paused');
      event.currentTarget.innerHTML = "<i class='far fa-play-circle'></i>";
      audio.pause();
    } else {
      if (window.audio && window.audio != audio){
        window.audio.pause();
        window.audio.currentTime = 0;
        playButtons.forEach((playButton) => {
          playButton.classList.remove('paused');
          playButton.classList.remove('playing');
          playButton.innerHTML = "<i class='fas fa-play-circle'></i>";
        })
      }
      window.audio = audio;
      event.currentTarget.classList.remove('paused');
      event.currentTarget.classList.add('playing');
      event.currentTarget.innerHTML = "<i class='fas fa-pause-circle'></i>";
      audio.play();
    }
  });
  audio.addEventListener('ended', (event) => {
    audio.pause();
    audio.currentTime = 0;
    window.audio = endAudio;
    endAudio.currentTime = 0;
    endAudio.play();
    button.classList.remove('playing');
    button.innerHTML = "<i class='fas fa-play-circle'></i>";
    if (button.classList.contains("play-btn-routine")) {
      if (button.classList.contains('morning')){
        fetch('routines/complete_morning_routine', {
          method: "PATCH"
        })
        .then(() => {
          updateHTMLForCompletedRoutine('morning');
        })
      } else if (button.classList.contains('night')){
        fetch('routines/complete_night_routine', {
          method: "PATCH"
        })
        .then(() => {
          updateHTMLForCompletedRoutine('night');
        })
      }
    }
  })
};

const setPlayButtonModal = (playButtonModal, audio) => {
  setPlayButton(playButtonModal, audio);
  playButtonModal.addEventListener('click', (event) => {
    const playButtonInPageDiv = document.getElementById(playButtonModal.dataset.playid);
    const playButtonInPage = playButtonInPageDiv.querySelector('.page__play-btn');
    playButtonInPage.classList = playButtonModal.classList;
    playButtonInPage.innerHTML = playButtonModal.innerHTML;
  })
};

const setplayButtons = () => {
  if (playButtons){
    playButtons.forEach((button) => {
      const audio = new Audio(button.dataset.sound);
      setPlayButton(button, audio);
    });
  }
};

const fillInModalContent = (title, directions, repetition, timeOfDay) => {
  document.getElementById("title-in-modal").innerText = title;
  let directionListHTML = "";
  directions.split("/").forEach( direction => {
    directionListHTML = directionListHTML + `<li>${direction}</li>`
  });
  document.getElementById("directions-list-in-modal").innerHTML = directionListHTML;
  const nbRepetitions = document.getElementById("repetitions");
  console.log(nbRepetitions);
  console.log(timeOfDay);
  if (nbRepetitions){
    if (timeOfDay === "morning"){
      console.log('hey morning');
      nbRepetitions.innerHTML = `Based on today's weather and the time spent on your computer yesterday, we will repeat this exercise <strong>${repetition} times</strong>.`;
    } else if (timeOfDay === "night") {
      console.log('hey night');
      nbRepetitions.innerHTML = `Based on today's weather and time spent on your computer, we will repeat this exercise <strong>${repetition} times</strong>.`;
    }
  }
  console.log(nbRepetitions.innerHTML);
};

const setModalExercises = () => {
  const openModalButtons = document.querySelectorAll('.open-btn-modal');
  if (openModalButtons){
    openModalButtons.forEach((openModalButton) => {
      openModalButton.addEventListener('click', (event) => {
        const title = event.currentTarget.dataset.title;
        const directions = event.currentTarget.dataset.directions;
        const repetition = event.currentTarget.dataset.repetition;
        let timeOfDay = "";
        if (openModalButton.classList.contains('morning')){
          timeOfDay = "morning";
        } else if (openModalButton.classList.contains('night')){
          console.log('this is night routine');
          timeOfDay = "night";
        }
        fillInModalContent(title, directions, repetition, timeOfDay);
        const playButtonModalDiv = document.getElementById('play-btn-modal-div');
        if (playButtonModalDiv) {
          const playButtonInPageDiv = document.getElementById(event.currentTarget.dataset.playid);
          const playButtonInPage = playButtonInPageDiv.querySelector('.page__play-btn');
          playButtonModalDiv.innerHTML = playButtonInPage.outerHTML;
          const playButtonModal = playButtonModalDiv.querySelector('.page__play-btn');
          playButtonModal.dataset.playid = event.currentTarget.dataset.playid;
          let audio = new Audio(playButtonModal.dataset.sound);
          if (playButtonModal.classList.contains('playing') || playButtonModal.classList.contains('paused')){
            audio = window.audio;
          }
          setPlayButtonModal(playButtonModal, audio);
        }
      })
    })
  }
};


export { setplayButtons, setModalExercises, updateHTMLForCompletedRoutine };
